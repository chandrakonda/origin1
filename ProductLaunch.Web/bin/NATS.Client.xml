<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NATS.Client</name>
    </assembly>
    <members>
        <member name="T:NATS.Client.ISubscription">
            <summary>
            Represents interest in a NATS topic.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.Unsubscribe">
            <summary>
            Removes interest in the given subject.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)">
            <summary>
            AutoUnsubscribe will issue an automatic Unsubscribe that is
            processed by the server when max messages have been received.
            This can be useful when sending a request to an unknown number
            of subscribers. Request() uses this functionality.
            </summary>
            <param name="max">Number of messages to receive before unsubscribing.</param>
        </member>
        <member name="M:NATS.Client.ISubscription.SetPendingLimits(System.Int64,System.Int64)">
            <summary>
            Sets the message limit and bytes limit of a subscriber.
            </summary>
            <param name="messageLimit">Maximum number of pending messages to allow.</param>
            <param name="bytesLimit">Maximum number of pending bytes to allow.</param> 
        </member>
        <member name="M:NATS.Client.ISubscription.GetPending(System.Int64@,System.Int64@)">
            <summary>
            Gets pending messages and bytes.
            </summary>
            <param name="pendingBytes">Current number of pending bytes.</param>
            <param name="pendingMessages">Current number of pending messages.</param>
        </member>
        <member name="M:NATS.Client.ISubscription.GetMaxPending(System.Int64@,System.Int64@)">
            <summary>
            Gets the maximum pending messages and pending bytes recorded.
            </summary>
            <param name="maxPendingBytes">Maximum number of pending bytes recorded.</param>
            <param name="maxPendingMessages">Maximum number of pending messages recorded.</param>
        </member>
        <member name="M:NATS.Client.ISubscription.ClearMaxPending">
            <summary>
            Clears the maximum pending statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Subject">
            <summary>
            Gets the subject of interest.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Queue">
            <summary>
            Gets the name of the queue groups this subscriber belongs to.
            </summary>
            <remarks>
            Optional queue group name. If present, all subscriptions with the
            same name will form a distributed queue, and each message will
            only be processed by one member of the group.
            </remarks>
        </member>
        <member name="P:NATS.Client.ISubscription.Connection">
            <summary>
            Gets the Connection this subscriber was created on.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.IsValid">
            <summary>
            True if the subscription is active, false otherwise.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.QueuedMessageCount">
            <summary>
            Gets the number of messages received, but not processed,
            this subscriber.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingByteLimit">
            <summary>
            Gets or sets the maximum number of pending bytes to allow.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingMessageLimit">
            <summary>
            Gets or sets the maximum number of pending messages to allow.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingBytes">
            <summary>
            Gets the current number of pending bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingMessages">
            <summary>
            Gets the current number of pending messages.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.MaxPendingBytes">
            <summary>
            Gets the maximum number of pending bytes recorded.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.MaxPendingMessages">
            <summary>
            Gets the maximum number of pending messages recorded.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Delivered">
            <summary>
            Gets the number of messages delivered to a subscriber.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Dropped">
            <summary>
            Gets the number of message dropped by violations of pending limits.
            </summary>
            <remarks>
            If the server declares the connection a slow consumer, this number may 
            not be valid.
            </remarks>
        </member>
        <member name="T:NATS.Client.IAsyncSubscription">
            <summary>
            An object of this class is an asynchronous subscription representing interest
            in a subject.   The subject can have wildcards (partial:*, full:>).
            Messages will be delivered to the associated MessageHandler event delegates.
            While nothing prevents event handlers from being added or 
            removed while processing messages.  If the subscriber was created without
            providing a handler, no messages will be received until
            Start() has been called.  This allows event handlers to be added
            before message processing begins.
            </summary>
        </member>
        <member name="M:NATS.Client.IAsyncSubscription.Start">
            <summary>
            Starts receiving messages.
            </summary>
            <remarks>If a message handler was not passed when
            creating the subscriber, the subscriber must assign
            delegates then complete the subscription process
            with this method.
            </remarks>
        </member>
        <member name="E:NATS.Client.IAsyncSubscription.MessageHandler">
            <summary>
            Adds or removes a message handler for this subscriber.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnState">
            <summary>
            State of the connection.
            </summary>
        </member>
        <member name="T:NATS.Client.IConnection">
            <summary>
            Represents the connection to the NATS server.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])">
            <summary>
            Publish publishes the data argument to the given subject. The data
            argument is left untouched and needs to be correctly interpreted on
            the receiver.
            </summary>
            <param name="subject">Subject to publish the message to.</param>
            <param name="data">Message payload</param>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(NATS.Client.Msg)">
            <summary>
            Publishes a Msg object, which includes the
            Subject, an optional Reply and an optional Data field.
            </summary>
            <param name="msg">The message to send.</param>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[])">
            <summary>
            Publish will perform a Publish() excpecting a response on the
            reply subject. Use Request() for automatically waiting for a response
            inline.
            </summary>
            <param name="subject">Subject to publish on</param>
            <param name="reply">Subject the receiver will on.</param>
            <param name="data">The message payload</param>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32)">
            <summary>
            Request will create an Inbox and perform a Request() call
            with the Inbox reply and return the first reply received.
            This is optimized for the case of multiple responses.
            </summary>
            <remarks>
            A negative timeout blocks forever, zero is not allowed.
            </remarks>
            <param name="subject">Subject to send the request on.</param>
            <param name="data">payload of the message</param>
            <param name="timeout">time to block</param>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[])">
            <summary>
            Request will create an Inbox and perform a Request() call
            with the Inbox reply and return the first reply received.
            This is optimized for the case of multiple responses.
            </summary>
            <param name="subject">Subject to send the request on.</param>
            <param name="data">payload of the message</param>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)">
            <summary>
            Asynchronrous method of request will create an Inbox 
            and perform a Request() call with the Inbox reply and return
            the first reply received.  This is optimized for the case of
            multiple responses.
            </summary>
            <remarks>
            A negative timeout blocks forever, zero is not allowed.
            </remarks>
            <param name="subject">Subject to send the request on.</param>
            <param name="data">payload of the message</param>
            <param name="timeout">time to block</param>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])">
            <summary>
             Asynchronrous method of Request that will create an Inbox and perform a Request() call
            with the Inbox reply and return the first reply received.
            This is optimized for the case of multiple responses.
            </summary>
            <param name="subject">Subject to send the request on.</param>
            <param name="data">payload of the message</param>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronrous method of request will create an Inbox 
            and perform a Request() call with the Inbox reply and return
            the first reply received.  This is optimized for the case of
            multiple responses.
            </summary>
            <remarks>
            A negative timeout blocks forever, zero is not allowed.
            </remarks>
            <param name="subject">Subject to send the request on.</param>
            <param name="data">payload of the message</param>
            <param name="timeout">time to block</param>
            <param name="token">cancellation token source</param>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronrous method of Request that will create an Inbox and perform a Request() call
            with the Inbox reply and return the first reply received.
            This is optimized for the case of multiple responses.
            </summary>
            <param name="subject">Subject to send the request on.</param>
            <param name="data">payload of the message</param>
            <param name="token">cancellation token</param>
        </member>
        <member name="M:NATS.Client.IConnection.NewInbox">
            <summary>
            NewInbox will return an inbox string which can be used for directed replies from
            subscribers. These are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </summary>
            <returns>A string representing an inbox.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeSync(System.String)">
            <summary>
            Subscribe will create a subscriber with interest in a given subject.
            The subject can have wildcards (partial:*, full:>). Messages will be delivered
            to the associated MsgHandler. If no MsgHandler is set, the
            subscription is a synchronous subscription and can be polled via
            Subscription.NextMsg().  Subscriber message handler delegates
            can be added or removed anytime.
            </summary>
            <param name="subject">Subject of interest.</param>
            <returns>A new Subscription</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String)">
            <summary>
            SubscribeAsynchronously will create an AsyncSubscriber with
            interest in a given subject.  Start() must be called to 
            begin receiving messages.
            </summary>
            <param name="subject">Subject of interest.</param>
            <returns>A new Subscription</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            SubscribeAsynch will create an AsyncSubscriber with
            interest in a given subject, assign the handler, and immediately
            start receiving messages.
            </summary>
            <param name="subject">Subject of interest.</param>
            <param name="handler">A message handler to initialize the MessageHandler event with.</param>
            <returns>A new Subscription</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous queue subscriber on the given
            subject. All subscribers with the same queue name will form the queue
            group and only one member of the group will be selected to receive any
            given message synchronously.
            </summary>
            <param name="subject">Subject of interest</param>
            <param name="queue">Name of the queue group</param>
            <returns>A new Subscription</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.String)">
            <summary>
            This method creates an asynchronous queue subscriber on the given subject.
            All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given
            message asynchronously. Start() must be called to 
            begin receiving messages.
            </summary>
            <param name="subject">Subject of interest</param>
            <param name="queue">Name of the queue group</param>
            <returns>A new Subscription</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            This method creates an asynchronous queue subscriber on the given subject.
            All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given
            message asynchronously. Start() must be called to 
            begin receiving messages.
            </summary>
            <param name="subject">Subject of interest</param>
            <param name="queue">Name of the queue group</param>
            <param name="handler">A message handler to initialize the MessageHandler event with.</param>
            <returns>A new Subscription</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Flush(System.Int32)">
            <summary>
            Flush will perform a round trip to the server and return when it
            receives the internal reply.
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
        </member>
        <member name="M:NATS.Client.IConnection.Flush">
            <summary>
            Flush will perform a round trip to the server and return when it
            receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.Close">
            <summary>
            Close will close the connection to the server. This call will release
            all blocking calls, such as Flush() and NextMsg().
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.IsClosed">
            <summary>
            Test if this connection has been closed.
            </summary>
            <returns>true if closed, false otherwise.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.IsReconnecting">
            <summary>
            Test if this connection is reconnecting.
            </summary>
            <returns>true if reconnecting, false otherwise.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.ResetStats">
            <summary>
            Resets connection statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.Opts">
            <summary>
            Returns the options used to create this connection.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ConnectedUrl">
            <summary>
            Returns the url of the server currently connected, null otherwise.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ConnectedId">
            <summary>
            Returns the id of the server currently connected.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.Servers">
            <summary>
            Returns the list of known server urls, including additional
            servers discovered after a connection has been established.  If
            authentication is enabled, Options.User or Options.Token 
            must be used when connecting with these urls.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.DiscoveredServers">
            <summary>
            Returns only the server urls that have been discovered
            after a connection has been established. If authentication is 
            enabled, Options.User or Options.Token 
            must be used when connecting with these urls.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.LastError">
            <summary>
            LastError reports the last error encountered via the Connection.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.Stats">
            <summary>
            Returns a race safe copy of connection statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.MaxPayload">
            <summary>
            Returns the server defined size limit that a message payload can have.
            </summary>
        </member>
        <member name="M:NATS.Client.Connection.getMessageChannel">
            <summary>
            Gets an available message channel for use with async subscribers.  It will
            setup the message channel pool if configured to do so.
            </summary>
            <returns>
            A channel for use, null if configuration dictates not to use the 
            channel pool.
            </returns>
        </member>
        <member name="M:NATS.Client.Connection.Flush">
            <summary>
            Flush will perform a round trip to the server and return when it
            receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.Connection.ToString">
            <summary>
            Returns a string representation of the
            value of this Connection instance.
            </summary>
            <returns>String value of this instance.</returns>
        </member>
        <member name="T:NATS.Client.Connection.TCPConnection">
            <summary>
            Convenience class representing the TCP connection to prevent 
            managing two variables throughout the NATs client code.
            </summary>
        </member>
        <member name="F:NATS.Client.Connection.TCPConnection.mu">
            A note on the use of streams.  .NET provides a BufferedStream
            that can sit on top of an IO stream, in this case the network
            stream. It increases performance by providing an additional
            buffer.
            
            So, here's what we have for writing:
                Client code
                     ->BufferedStream (bw)
                         ->NetworkStream/SslStream (srvStream)
                             ->TCPClient (srvClient);
                             
             For reading:
                Client code
                     ->NetworkStream/SslStream (srvStream)
                         ->TCPClient (srvClient);
            
        </member>
        <member name="T:NATS.Client.Connection.SubChannelPool">
            <summary>
            The SubChannelPool class is used when the application
            has specified async subscribers will share channels and associated
            processing threads in the connection.  It simply returns a channel 
            that already has a long running task (thread) processing it.  
            Async subscribers use this channel in lieu of their own channel and
            message processing task.
            </summary>
        </member>
        <member name="M:NATS.Client.Connection.SubChannelPool.getChannel">
            <summary>
            Gets a message channel for use with an async subscriber.
            </summary>
            <returns>
            A channel, already setup with a task processing messages.
            </returns>
        </member>
        <member name="T:NATS.Client.Connection.SubChannelPool.SubChannelProcessor">
            <summary>
            SubChannelProcessor creates a channel and a task to process
            messages on that channel.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnectionFactory">
            <summary>
            Creates a connection to the NATS server.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.#ctor">
            <summary>
            Creates a connection factory to the NATS server.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.String)">
            <summary>
            CreateConnection will attempt to connect to the NATS server.
            The url can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.
            </summary>
            <param name="url">The url</param>
            <returns>A new connection to the NATS server</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.GetDefaultOptions">
            <summary>
            Retrieves the default set ot client options.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateSecureConnection(System.String)">
            <summary>
            CreateSecureConnection will attempt to connect to the NATS server using TLS.
            The url can contain username/password semantics.
            </summary>
            <param name="url">connect url</param>
            <returns>A new connection to the NATS server</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection">
            <summary>
            Create a connection to the NATs server using default options.
            </summary>
            <returns>A new connection to the NATS server</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(NATS.Client.Options)">
            <summary>
            CreateConnection to the NATs server using the provided options.
            </summary>
            <param name="opts">NATs client options</param>
            <returns>A new connection to the NATS server</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection">
            <summary>
            Create an encoded connection to the NATs server using default options.
            </summary>
            <returns>A new connection to the NATS server</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(System.String)">
            <summary>
            CreateEncodeedConnection will attempt to connect to the NATS server.
            The url can contain username/password semantics.
            </summary>
            <param name="url">The url</param>
            <returns>A new connection to the NATS server</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(NATS.Client.Options)">
            <summary>
            CreateEncodedConnection to the NATs server using the provided options.
            </summary>
            <param name="opts">NATs client options</param>
            <returns>A new connection to the NATS server</returns>
        </member>
        <member name="T:NATS.Client.Serializer">
            <summary>
            Overrides default binary serialization.
            </summary>
            <param name="obj">The object to serialize</param>
        </member>
        <member name="T:NATS.Client.Deserializer">
            <summary>
            Overrides the default binary deserialization.
            </summary>
            <param name="data">Data from the mesasge payload</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:NATS.Client.EncodedMessageEventArgs">
            <summary>
            Event arguments for the EncodedConnection Asynchronous Subscriber delegate.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Subject">
            <summary>
            Gets the subject this object was received on.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Reply">
            <summary>
            Gets the reply
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.ReceivedObject">
            <summary>
            Gets the object decoded (deserialized) from the incoming message.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Message">
            <summary>
            Gets the original message this object was deserialized from.
            </summary>
        </member>
        <member name="T:NATS.Client.EncodedConnection">
            <summary>
            This class subclasses the Connection class to support serialization.
            </summary>
        </member>
        <member name="T:NATS.Client.IEncodedConnection">
            <summary>
            Represents an encoded connection to the NATS server.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Publish(System.String,System.Object)">
            <summary>
            Publish serializes and publishes an object to the given subject. The object
            argument is left untouched and needs to be correctly interpreted on
            the receiver.
            </summary>
            <param name="subject">Subject to publish the message to.</param>
            <param name="obj">The object to send</param>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Publish(System.String,System.String,System.Object)">
            <summary>
            Publish will perform a Publish() expecting a response on the
            reply subject. Use Request() for automatically waiting for a response
            inline.
            </summary>
            <param name="subject">Subject to publish on</param>
            <param name="reply">Subject the receiver will on.</param>
            <param name="obj">The object to send</param>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)">
            <summary>
            Request will create an Inbox and perform a Request() call
            with the Inbox reply and return the first reply received.
            This is optimized for the case of multiple responses.
            </summary>
            <remarks>
            A negative timeout blocks forever, zero is not allowed.
            </remarks>
            <param name="subject">Subject to send the request on.</param>
            <param name="obj">The object to send</param>
            <param name="timeout">time to block</param>
            <returns>An object from the replier.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)">
            <summary>
            Request will create an Inbox and perform a Request() call
            with the Inbox reply and return the first reply received.
            This is optimized for the case of multiple responses.
            </summary>
            <param name="subject">Subject to send the request on.</param>
            <param name="obj">The object to send</param>
            <returns>An object from the replier.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.NewInbox">
            <summary>
            NewInbox will return an inbox string which can be used for directed replies from
            subscribers. These are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </summary>
            <returns>A string representing an inbox.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            SubscribeAsync will create an AsyncSubscriber with
            interest in a given subject, assign the handler, and immediately
            start receiving messages.
            </summary>
            <param name="subject">Subject of interest.</param>
            <param name="handler">An encoded message handler delegate.</param>
            <returns>A new Subscription</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            This method creates an asynchronous queue subscriber on the given subject.
            All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given
            message asynchronously. Start() must be called to 
            begin receiving messages.
            </summary>
            <param name="subject">Subject of interest</param>
            <param name="queue">Name of the queue group</param>
            <param name="handler">A message handler to initialize the MessageHandler event with.</param>
            <returns>A new Subscription</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Flush(System.Int32)">
            <summary>
            Flush will perform a round trip to the server and return when it
            receives the internal reply.
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Flush">
            <summary>
            Flush will perform a round trip to the server and return when it
            receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Close">
            <summary>
            Close will close the connection to the server. This call will release
            all blocking calls, such as Flush() and NextMsg().
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsClosed">
            <summary>
            Test if this connection has been closed.
            </summary>
            <returns>true if closed, false otherwise.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsReconnecting">
            <summary>
            Test if this connection is reconnecting.
            </summary>
            <returns>true if reconnecting, false otherwise.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.ResetStats">
            <summary>
            Resets connection statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Opts">
            <summary>
            Returns the options used to create this connection.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.ConnectedUrl">
            <summary>
            Returns the url of the server currently connected, null otherwise.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.ConnectedId">
            <summary>
            Returns the id of the server currently connected.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Servers">
            <summary>
            Servers returns the list of potential servers, including those updated after 
            a connection has been made.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.LastError">
            <summary>
            LastError reports the last error encountered via the Connection.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Stats">
            <summary>
            Returns a race safe copy of connection statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.MaxPayload">
            <summary>
            Returns the server defined size limit that a message payload can have.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.OnSerialize">
            <summary>
            Overrides the default serialization.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.OnDeserialize">
            <summary>
            Overrides the default deserialization.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSException">
            <summary>
            The exception that is thrown when there is a NATS error condition.  All
            NATS exception inherit from this class.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionException">
            <summary>
            The exception that is thrown when there is a connection error.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSProtocolException">
            <summary>
            This exception that is thrown when there is an internal error with
            the NATS protocol.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSNoServersException">
            <summary>
            The exception that is thrown when a connection cannot be made
            to any server.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSecureConnWantedException">
            <summary>
            The exception that is thrown when a secure connection is requested,
            but not required.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSecureConnRequiredException">
            <summary>
            The exception that is thrown when a secure connection is required.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionClosedException">
            <summary>
            The exception that is thrown when a an operation is performed on
            a connection that is closed.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSlowConsumerException">
            <summary>
            The exception that is thrown when a consumer (subscription) is slow.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSStaleConnectionException">
            <summary>
            The exception that is thrown when an operation occurs on a connection
            that has been determined to be stale.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSMaxPayloadException">
            <summary>
            The exception that is thrown when a message payload exceeds what
            the maximum configured.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSMaxMessagesException">
            <summary>
            The exception that is thrown when a subscriber has exceeded the maximum
            number of messages that has been configured.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSBadSubscriptionException">
            <summary>
            The exception that is thrown when a subscriber operation is performed on
            an invalid subscriber.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSTimeoutException">
            <summary>
            The exception that is thrown when a NATS operation times out.
            </summary>
        </member>
        <member name="T:NATS.Client.IStatistics">
            <summary>
            Tracks various statistics received and sent on this connection.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.InMsgs">
            <summary>
            Gets the number of inbound messages received.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.OutMsgs">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.InBytes">
            <summary>
            Gets the number of incoming bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.OutBytes">
            <summary>
            Gets the outgoing number of bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.Reconnects">
            <summary>
            Gets the number of reconnections.
            </summary>
        </member>
        <member name="T:NATS.Client.ISyncSubscription">
            <summary>
            A Syncronous Subscripion will express interest in a given subject.
            The subject can have wildcards (partial:*, full:>).
            Messages arriving are retrieved via NextMsg()
            </summary>
        </member>
        <member name="M:NATS.Client.ISyncSubscription.NextMessage">
            <summary>
            This method will return the next message available to a synchronous subscriber
            or block until one is available.
            </summary>
            <returns>a NATS message</returns>
        </member>
        <member name="M:NATS.Client.ISyncSubscription.NextMessage(System.Int32)">
            <summary>
            This method will return the next message available to a synchronous subscriber
            or block until one is available. A timeout can be used to return when no
            message has been delivered.
            </summary>
            <remarks>
            A timeout of 0 will return null immediately if there are no messages.
            </remarks>
            <param name="timeout">Timeout value</param>
            <returns>a NATS message</returns>
        </member>
        <member name="T:NATS.Client.Msg">
            <summary>
            A NATS message is an object encapsulating a subject, optional reply
            payload, and subscription information, sent or received by teh client
            application.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.#ctor">
            <summary>
            Creates an empty message.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Creates a message with a subject, reply, and data.
            </summary>
            <param name="subject">Subject of the message, required.</param>
            <param name="reply">Reply subject, can be null.</param>
            <param name="data">Message payload</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a message with a subject and data.
            </summary>
            <param name="subject">Subject of the message, required.</param>
            <param name="data">Message payload</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String)">
            <summary>
            Creates a message with a subject and no payload.
            </summary>
            <param name="subject">Subject of the message, required.</param>
        </member>
        <member name="M:NATS.Client.Msg.AssignData(System.Byte[])">
            <summary>
            Assigns the data of the message.  This is a direct assignment,
            to avoid expensive copy operations.  A change to the passed
            byte array will be changed in the message.
            </summary>
            <remarks>
            The application is responsible for the data integrity in the message.
            </remarks>
            <param name="data">a bytes buffer of data.</param>
        </member>
        <member name="M:NATS.Client.Msg.ToString">
            <summary>
            Generates a string representation of the messages.
            </summary>
            <returns>A string representation of the messages.</returns>
        </member>
        <member name="P:NATS.Client.Msg.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Reply">
            <summary>
            Gets or sets the reply subject.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Data">
            <summary>
            Sets data in the message.  This copies application data into the message.
            </summary>
            <remarks>
            See <see cref="M:NATS.Client.Msg.AssignData(System.Byte[])">AssignData</see> to directly pass the bytes
            buffer.
            </remarks>
            <see cref="M:NATS.Client.Msg.AssignData(System.Byte[])"/>
        </member>
        <member name="P:NATS.Client.Msg.ArrivalSubcription">
            <summary>
            Gets the subscription assigned to the messages.
            </summary>
        </member>
        <member name="T:NATS.Client.Defaults">
            <summary>
            This class contains default values for fields used throughout NATS.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Version">
            <summary>
            Client version
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Url">
            <summary>
            The default NATS connect url ("nats://localhost:4222")
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Port">
            <summary>
            The default NATS connect port. (4222)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxReconnect">
            <summary>
            Default number of times to attempt a reconnect. (60)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectWait">
            <summary>
            Default ReconnectWait time (2 seconds)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Timeout">
            <summary>
            Default timeout  (2 seconds).
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.PingInterval">
            <summary>
             Default ping interval (2 minutes);
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxPingOut">
            <summary>
            Default MaxPingOut value (2);
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxChanLen">
            <summary>
            Default MaxChanLen (65536)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.RequestChanLen">
            <summary>
            Default Request Channel Length
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.LangString">
            <summary>
            Language string of this client, ".NET"
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.SubPendingMsgsLimit">
            <summary>
            Default subscriber pending messages limit.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.SubPendingBytesLimit">
            <summary>
            Default subscriber pending bytes limit.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnEventArgs">
            <summary>
            Event arguments for the ConnEventHandler type delegate.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnEventArgs.Conn">
            <summary>
            Gets the connection associated with the event.
            </summary>
        </member>
        <member name="T:NATS.Client.ErrEventArgs">
            <summary>
            Event arguments for the ErrorEventHandler type delegate.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Conn">
            <summary>
            Gets the connection associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Subscription">
            <summary>
            Gets the Subscription associated wit the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Error">
            <summary>
            Gets the error associated with the event.
            </summary>
        </member>
        <member name="T:NATS.Client.IC">
            Internal Constants
        </member>
        <member name="T:NATS.Client.MsgHandlerEventArgs">
            <summary>
            This class is passed into the MsgHandler delegate, providing the
            message received.
            </summary>
        </member>
        <member name="P:NATS.Client.MsgHandlerEventArgs.Message">
            <summary>
            Retrieves the message.
            </summary>
        </member>
        <member name="T:NATS.Client.NUID">
            <summary>
            NUID needs to be very fast to generate and truly unique, all while being entropy pool friendly.
            We will use 12 bytes of crypto generated data (entropy draining), and 10 bytes of sequential data
            that is started at a pseudo random number and increments with a pseudo-random increment.
            Total is 22 bytes of base 36 ascii text.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.LENGTH">
            <summary>
            Length of the NUID.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.MAXPRE">
            <summary>
            Maximum value of the prefix.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.MAXSEQ">
            <summary>
            Maximum value of the sequence.
            </summary>
        </member>
        <member name="M:NATS.Client.NUID.RandomizePrefix">
            <summary>
            Generates a new crypto/rand seeded prefix.
            </summary>
            <remarks>
            Generally not needed, this happens automatically.
            </remarks>
        </member>
        <member name="M:NATS.Client.NUID.#ctor">
            <summary>
            Creates a new NUID object.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Instance">
            <summary>
            Gets the global instance of a NUID object
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.NextGlobal">
            <summary>
            Returns the next NUID from the global instance.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Next">
            <summary>
            Returns the next nuid string value from the NUID object.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Pre">
            <summary>
            Gets or sets the prefix.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.NUID.Seq">
            <summary>
            Gets or sets the sequence.  Not normally used outside of testing.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.NUID.Length">
            <summary>
            Gets the Length of the nuid.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="T:NATS.Client.Options">
            <summary>
            This class is used to setup all NATs client options.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ClosedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection is closed.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.DisconnectedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection has been disconnected from a server.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection has reconnected to a server.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.AsyncErrorEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when an error occurs out of band.
            </summary>
        </member>
        <member name="M:NATS.Client.Options.AddCertificate(System.String)">
            <summary>
            Adds a certifcate for use with a secure connection.
            </summary>
            <param name="fileName">Path to the certificate file to add.</param>
        </member>
        <member name="M:NATS.Client.Options.AddCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds a certificate for use with a secure connection.
            </summary>
            <param name="certificate">Certificate to add.</param>
        </member>
        <member name="F:NATS.Client.Options.TLSRemoteCertificationValidationCallback">
            <summary>
            Overrides the default NATS RemoteCertificationValidationCallback.
            </summary>
            <remarks>
            The default callback simply checks if there were any protocol
            errors.  Overriding this callback useful during testing, or accepting self
            signed certificates.
            </remarks>
        </member>
        <member name="M:NATS.Client.Options.ToString">
            <summary>
            Returns a string representation of the
            value of this Options instance.
            </summary>
            <returns>String value of this instance.</returns>
        </member>
        <member name="P:NATS.Client.Options.Url">
            <summary>
            Gets or sets the url used to connect to the NATs server.  This may
            contain user information.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Servers">
            <summary>
            Gets or Sets the array of servers that the NATs client will connect to.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.NoRandomize">
            <summary>
            Gets or Sets the randomization of choosing a server to connect to.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Name">
            <summary>
            Gets or sets the name of this client.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Verbose">
            <summary>
            Gets or sets the verbosity of logging.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Pedantic">
            <summary>
            N/A.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Secure">
            <summary>
            Get or sets the secure property.   Not currently implemented.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.AllowReconnect">
            <summary>
            Gets or Sets the allow reconnect flag.  When set to false,
            the NATs client will not attempt to reconnect if a connection
            has been lost.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.MaxReconnect">
            <summary>
            Gets or sets the maxmimum number of times a connection will
            attempt to reconnect.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.ReconnectWait">
            <summary>
            Gets or Sets the amount of time, in milliseconds, the client will 
            wait during a reconnection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.PingInterval">
            <summary>
            Gets or sets the interval pings will be sent to the server.
            Take care to coordinate this value with the server's interval.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Timeout">
            <summary>
            Gets or sets the timeout when flushing a connection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.MaxPingsOut">
            <summary>
            Gets or sets the maximum number of outstanding pings before
            terminating a connection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.SubChannelLength">
            <summary>
            Gets or sets the size of the subscriber channel, or number
            of messages the subscriber will buffer internally.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.User">
            <summary>
            Gets or sets the user name used when connecting to the NATs server
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Password">
            <summary>
            Sets the user password used when connecting to the NATs server
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Token">
            <summary>
            Gets or sets the token used when connecting to the NATs server
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.SubscriberDeliveryTaskCount">
            <summary>
            Sets or gets number of long running tasks to deliver messages
            to asynchronous subscribers.  The default is 0 indicating each
            asynchronous subscriber has its own channel and task created to 
            deliver messages.
            </summary>
            <remarks>
            The default where each subscriber has a delivery task is very 
            performant, but does not scale well when large numbers of
            subscribers are required in an application.  Setting this value
            will limit the number of subscriber channels to the specified number
            of long running tasks.  These tasks will process messages for ALL
            asynchronous subscribers rather than one task for each subscriber.  
            Delivery order by subscriber is still guaranteed.  The shared message
            processing channels are still each bounded by the SubChannelLength 
            option.  Note, slow subscriber errors will flag the last subscriber 
            processed in the tasks, which may not actually be the slowest subscriber.
            </remarks>
        </member>
        <member name="P:NATS.Client.Statistics.InMsgs">
            <summary>
            Gets the number of inbound messages received.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.OutMsgs">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.InBytes">
            <summary>
            Gets the number of incoming bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.OutBytes">
            <summary>
            Gets the outgoing number of bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.Reconnects">
            <summary>
            Gets the number of reconnections.
            </summary>
        </member>
    </members>
</doc>
